#include "Vector2D.hpp"
#include <stdexcept>

  void Vector2D::setX(double x) {
    this->m_x = x;
  }
 void Vector2D::setY(double y) {
    this->m_y = y;
  }

 double  Vector2D::getX() {
   return this->m_x;
 }
 double Vector2D::getY() {
   return this->m_y;
 }
/* 
  double& Vector2D::operator[](std::size_t i) {
    if (i == 0) { return this->m_x; } 
    else { return this->m_y; }
  }

  const double&  Vector2D::operator[](std::size_t i) {
    if (i == 0) { return this->m_x; } else { return this->m_y; }
  }
*/
  Vector2D Vector2D::operator= (const Vector2D& other) {
    Vector2D* v = new Vector2D(other.m_x, other.m_y);
    return* v;  
 // this->m_x = other.m_x;
   // this->m_y = other.m_y;
   // return this;
  }

  bool  Vector2D::operator== (const Vector2D& v1) {
    if (v1.m_x == this->m_x) {
      if (v1.m_y == this->m_y) {
	return true;
      }
    }
    return false;
  }
  Vector2D Vector2D::operator- (Vector2D& other) {
    other.m_x *= -1;
    other.m_y *= -1;

    return other;
  }
  Vector2D Vector2D::operator+= (const Vector2D& other) {
    this->m_x += other.m_x;
    this->m_y += other.m_y;

    return *this;

  }
  Vector2D Vector2D::operator-= (const Vector2D& other) {
    this->m_x -= other.m_x;
    this->m_y -= other.m_y;

    return *this;

  }
  Vector2D Vector2D::operator+ (const Vector2D& v1)  {
    Vector2D* t = new Vector2D(v1.m_x + this->m_x, v1.m_y + this->m_y);
    return *t;
  }

  Vector2D Vector2D::operator*= (const Vector2D& other)  {
    this->m_x *= other.m_x;
    this->m_y *= other.m_y;

    return *this;

  }

  Vector2D Vector2D::operator/= (const Vector2D& other)  {
    if (other.m_x == 0.0 || other.m_y == 0.0 ) { throw std::invalid_argument("division by 0"); } 
    this->m_x /= other.m_x;
    this->m_y /= other.m_y;

    return *this;

  }

  Vector2D Vector2D::operator* (const Vector2D& v1) {
    Vector2D* t = new Vector2D(v1.m_x * this->m_x, v1.m_y * this->my);
    return *t;

  }
  Vector2D Vector2D::operator/ (const Vector2D& v1) {
    if (this->m_x == 0.0 || this->m_y == 0.0) { throw std::invalid_argument("division by 0"); }
    Vector2D* t = new Vector2D(v1.m_x / this->m_x, v1.m_y / this->my);
    return *t;
  
  }

  std::ostream& operator<<(const std::ostream& os, const Vector2D& v) {
    os << v.getX() << " " << v.getY();
    return os;
  } 
