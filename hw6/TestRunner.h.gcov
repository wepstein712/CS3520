        -:    0:Source:cxxtest-4.4/cxxtest/TestRunner.h
        -:    0:Graph:runner.gcno
        -:    0:Data:runner.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:-------------------------------------------------------------------------
        -:    3: CxxTest: A lightweight C++ unit testing library.
        -:    4: Copyright (c) 2008 Sandia Corporation.
        -:    5: This software is distributed under the LGPL License v3
        -:    6: For more information, see the COPYING file in the top CxxTest directory.
        -:    7: Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
        -:    8: the U.S. Government retains certain rights in this software.
        -:    9:-------------------------------------------------------------------------
        -:   10:*/
        -:   11:
        -:   12:#ifndef __cxxtest_TestRunner_h__
        -:   13:#define __cxxtest_TestRunner_h__
        -:   14:
        -:   15://
        -:   16:// TestRunner is the class that runs all the tests.
        -:   17:// To use it, create an object that implements the TestListener
        -:   18:// interface and call TestRunner::runAllTests( myListener );
        -:   19://
        -:   20:
        -:   21:#include <cxxtest/TestListener.h>
        -:   22:#include <cxxtest/RealDescriptions.h>
        -:   23:#include <cxxtest/TestSuite.h>
        -:   24:#include <cxxtest/TestTracker.h>
        -:   25:
        -:   26:namespace CxxTest
        -:   27:{
        -:   28:class TestRunner
        -:   29:{
        -:   30:public:
        -:   31:
        -:   32:    static void setListener(TestListener* listener)
        -:   33:    {
        -:   34:        tracker().setListener(listener);
        -:   35:    }
        -:   36:
        1:   37:    static void runAllTests(TestListener &listener)
        -:   38:    {
        1:   39:        tracker().setListener(&listener);
        1:   40:        _TS_TRY { TestRunner().runWorld(); }
        -:   41:        _TS_LAST_CATCH( { tracker().failedTest(__FILE__, __LINE__, "Exception thrown from world"); });
        1:   42:        tracker().setListener(0);
        1:   43:    }
        -:   44:
        -:   45:    static void runAllTests(TestListener *listener)
        -:   46:    {
        -:   47:        if (listener)
        -:   48:        {
        -:   49:            listener->warning(__FILE__, __LINE__, "Deprecated; Use runAllTests( TestListener & )");
        -:   50:            runAllTests(*listener);
        -:   51:        }
        -:   52:    }
        -:   53:
        -:   54:private:
        1:   55:    void runWorld()
        -:   56:    {
        1:   57:        RealWorldDescription wd;
        2:   58:        WorldGuard sg;
        -:   59:
        1:   60:        tracker().enterWorld(wd);
        1:   61:        if (wd.setUp())
        -:   62:        {
        3:   63:            for (SuiteDescription *sd = wd.firstSuite(); sd; sd = sd->next())
        -:   64:            {
        2:   65:                if (sd->active())
        -:   66:                {
        2:   67:                    runSuite(*sd);
        -:   68:                }
        -:   69:            }
        -:   70:
        1:   71:            wd.tearDown();
        -:   72:        }
        2:   73:        tracker().leaveWorld(wd);
        1:   74:    }
        -:   75:
        2:   76:    void runSuite(SuiteDescription &sd)
        -:   77:    {
        2:   78:        StateGuard sg;
        -:   79:
        2:   80:        tracker().enterSuite(sd);
        2:   81:        if (sd.setUp())
        -:   82:        {
       21:   83:            for (TestDescription *td = sd.firstTest(); td; td = td->next())
        -:   84:            {
       19:   85:                if (td->active())
        -:   86:                {
       19:   87:                    runTest(*td);
        -:   88:                }
        -:   89:            }
        -:   90:
        2:   91:            sd.tearDown();
        -:   92:        }
        2:   93:        tracker().leaveSuite(sd);
        2:   94:    }
        -:   95:
       19:   96:    void runTest(TestDescription &td)
        -:   97:    {
       19:   98:        StateGuard sg;
        -:   99:
       19:  100:        tracker().enterTest(td);
       19:  101:        if (td.setUp())
        -:  102:        {
       19:  103:            td.run();
       19:  104:            td.tearDown();
        -:  105:        }
       19:  106:        tracker().leaveTest(td);
       19:  107:    }
        -:  108:
        -:  109:    class StateGuard
        -:  110:    {
        -:  111:#ifdef _CXXTEST_HAVE_EH
        -:  112:        bool _abortTestOnFail;
        -:  113:#endif // _CXXTEST_HAVE_EH
        -:  114:        unsigned _maxDumpSize;
        -:  115:
        -:  116:    public:
       22:  117:        StateGuard()
        -:  118:        {
        -:  119:#ifdef _CXXTEST_HAVE_EH
        -:  120:            _abortTestOnFail = abortTestOnFail();
        -:  121:#endif // _CXXTEST_HAVE_EH
       22:  122:            _maxDumpSize = maxDumpSize();
       22:  123:        }
        -:  124:
       22:  125:        ~StateGuard()
        -:  126:        {
        -:  127:#ifdef _CXXTEST_HAVE_EH
        -:  128:            setAbortTestOnFail(_abortTestOnFail);
        -:  129:#endif // _CXXTEST_HAVE_EH
       22:  130:            setMaxDumpSize(_maxDumpSize);
       22:  131:        }
        -:  132:    };
        -:  133:
        1:  134:    class WorldGuard : public StateGuard
        -:  135:    {
        -:  136:    public:
        1:  137:        WorldGuard() : StateGuard()
        -:  138:        {
        -:  139:#ifdef _CXXTEST_HAVE_EH
        -:  140:            setAbortTestOnFail(CXXTEST_DEFAULT_ABORT);
        -:  141:#endif // _CXXTEST_HAVE_EH
        1:  142:            setMaxDumpSize(CXXTEST_MAX_DUMP_SIZE);
        1:  143:        }
        -:  144:    };
        -:  145:};
        -:  146:
        -:  147://
        -:  148:// For --no-static-init
        -:  149://
        -:  150:void initialize();
        -:  151:}
        -:  152:
        -:  153:
        -:  154:#endif // __cxxtest_TestRunner_h__
