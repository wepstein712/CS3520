        -:    0:Source:cxxtest-4.4/cxxtest/TestSuite.cpp
        -:    0:Graph:runner.gcno
        -:    0:Data:runner.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:-------------------------------------------------------------------------
        -:    3: CxxTest: A lightweight C++ unit testing library.
        -:    4: Copyright (c) 2008 Sandia Corporation.
        -:    5: This software is distributed under the LGPL License v3
        -:    6: For more information, see the COPYING file in the top CxxTest directory.
        -:    7: Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
        -:    8: the U.S. Government retains certain rights in this software.
        -:    9:-------------------------------------------------------------------------
        -:   10:*/
        -:   11:
        -:   12:#ifndef __cxxtest__TestSuite_cpp__
        -:   13:#define __cxxtest__TestSuite_cpp__
        -:   14:
        -:   15:#include <cxxtest/TestSuite.h>
        -:   16:#if defined(_CXXTEST_HAVE_STD)
        -:   17:#include <fstream>
        -:   18:#endif
        -:   19:
        -:   20:namespace CxxTest
        -:   21:{
        -:   22://
        -:   23:// TestSuite members
        -:   24://
        2:   25:TestSuite::~TestSuite() {}
       19:   26:void TestSuite::setUp() {}
       19:   27:void TestSuite::tearDown() {}
        -:   28:
        -:   29://
        -:   30:// Test-aborting stuff
        -:   31://
        -:   32:static bool currentAbortTestOnFail = false;
        -:   33:
    #####:   34:bool abortTestOnFail()
        -:   35:{
    #####:   36:    return currentAbortTestOnFail;
        -:   37:}
        -:   38:
    #####:   39:void setAbortTestOnFail(bool value)
        -:   40:{
    #####:   41:    currentAbortTestOnFail = value;
    #####:   42:}
        -:   43:
    #####:   44:void doAbortTest()
        -:   45:{
        -:   46:#   if defined(_CXXTEST_HAVE_EH)
        -:   47:    if (currentAbortTestOnFail)
        -:   48:    {
        -:   49:        throw AbortTest();
        -:   50:    }
        -:   51:#   endif // _CXXTEST_HAVE_EH
    #####:   52:}
        -:   53:
        -:   54://
        -:   55:// Max dump size
        -:   56://
        -:   57:static unsigned currentMaxDumpSize = CXXTEST_MAX_DUMP_SIZE;
        -:   58:
       22:   59:unsigned maxDumpSize()
        -:   60:{
       22:   61:    return currentMaxDumpSize;
        -:   62:}
        -:   63:
       23:   64:void setMaxDumpSize(unsigned value)
        -:   65:{
       23:   66:    currentMaxDumpSize = value;
       23:   67:}
        -:   68:
        -:   69://
        -:   70:// Some non-template functions
        -:   71://
    #####:   72:void doTrace(const char *file, int line, const char *message)
        -:   73:{
    #####:   74:    if (tracker().print_tracing)
        -:   75:    {
    #####:   76:        tracker().trace(file, line, message);
        -:   77:    }
    #####:   78:}
        -:   79:
    #####:   80:void doWarn(const char *file, int line, const char *message)
        -:   81:{
    #####:   82:    tracker().warning(file, line, message);
    #####:   83:}
        -:   84:
        -:   85:#   if defined(_CXXTEST_HAVE_EH)
        -:   86:void doSkipTest(const char* file, int line, const char* message)
        -:   87:{
        -:   88:    tracker().skippedTest(file, line, message);
        -:   89:    throw SkipTest();
        -:   90:#   else
    #####:   91:void doSkipTest(const char * file, int line, const char*)
        -:   92:{
    #####:   93:    doWarn(file, line, "Test skipping is not supported without exception handling.");
        -:   94:#   endif
    #####:   95:}
        -:   96:
    #####:   97:void doFailTest(const char * file, int line, const char * message)
        -:   98:{
    #####:   99:    tracker().failedTest(file, line, message);
    #####:  100:    TS_ABORT();
    #####:  101:}
        -:  102:
    #####:  103:void doFailAssert(const char * file, int line,
        -:  104:                  const char * expression, const char * message)
        -:  105:{
    #####:  106:    if (message)
        -:  107:    {
    #####:  108:        tracker().failedTest(file, line, message);
        -:  109:    }
    #####:  110:    tracker().failedAssert(file, line, expression);
    #####:  111:    TS_ABORT();
    #####:  112:}
        -:  113:
    #####:  114:bool sameData(const void * x, const void * y, unsigned size)
        -:  115:{
    #####:  116:    if (size == 0)
        -:  117:    {
    #####:  118:        return true;
        -:  119:    }
        -:  120:
    #####:  121:    if (x == y)
        -:  122:    {
    #####:  123:        return true;
        -:  124:    }
        -:  125:
    #####:  126:    if (!x || !y)
        -:  127:    {
    #####:  128:        return false;
        -:  129:    }
        -:  130:
    #####:  131:    const char *cx = (const char *)x;
    #####:  132:    const char *cy = (const char *)y;
    #####:  133:    while (size --)
        -:  134:    {
    #####:  135:        if (*cx++ != *cy++)
        -:  136:        {
    #####:  137:            return false;
        -:  138:        }
        -:  139:    }
        -:  140:
    #####:  141:    return true;
        -:  142:}
        -:  143:
    #####:  144:void doAssertSameData(const char * file, int line,
        -:  145:                      const char * xExpr, const void * x,
        -:  146:                      const char * yExpr, const void * y,
        -:  147:                      const char * sizeExpr, unsigned size,
        -:  148:                      const char * message)
        -:  149:{
    #####:  150:    if (!sameData(x, y, size))
        -:  151:    {
    #####:  152:        if (message)
        -:  153:        {
    #####:  154:            tracker().failedTest(file, line, message);
        -:  155:        }
    #####:  156:        tracker().failedAssertSameData(file, line, xExpr, yExpr, sizeExpr, x, y, size);
    #####:  157:        TS_ABORT();
        -:  158:    }
    #####:  159:}
        -:  160:
        -:  161:#if defined(_CXXTEST_HAVE_STD)
    #####:  162:bool sameFiles(const char * file1, const char * file2, std::ostringstream & explanation)
        -:  163:{
    #####:  164:    std::string ppprev_line;
    #####:  165:    std::string pprev_line;
    #####:  166:    std::string prev_line;
    #####:  167:    std::string curr_line;
        -:  168:
    #####:  169:    std::ifstream is1;
    #####:  170:    is1.open(file1);
    #####:  171:    std::ifstream is2;
    #####:  172:    is2.open(file2);
    #####:  173:    if (!is1)
        -:  174:    {
    #####:  175:        explanation << "File '" << file1 << "' does not exist!";
    #####:  176:        return false;
        -:  177:    }
    #####:  178:    if (!is2)
        -:  179:    {
    #####:  180:        explanation << "File '" << file2 << "' does not exist!";
    #####:  181:        return false;
        -:  182:    }
        -:  183:
    #####:  184:    int nline = 1;
        -:  185:    char c1, c2;
        -:  186:    while (1)
        -:  187:    {
    #####:  188:        is1.get(c1);
    #####:  189:        is2.get(c2);
    #####:  190:        if (!is1 && !is2) { return true; }
    #####:  191:        if (!is1)
        -:  192:        {
    #####:  193:            explanation << "File '" << file1 << "' ended before file '" << file2 << "' (line " << nline << ")";
    #####:  194:            explanation << std::endl << "= " << ppprev_line << std::endl << "=  " << pprev_line << std::endl << "= " << prev_line << std::endl << "< " << curr_line;
    #####:  195:            is1.get(c1);
    #####:  196:            while (is1 && (c1 != '\n'))
        -:  197:            {
    #####:  198:                explanation << c1;
    #####:  199:                is1.get(c1);
        -:  200:            }
    #####:  201:            explanation << std::endl;
    #####:  202:            return false;
        -:  203:        }
    #####:  204:        if (!is2)
        -:  205:        {
    #####:  206:            explanation << "File '" << file2 << "' ended before file '" << file1 << "' (line " << nline << ")";
    #####:  207:            explanation << std::endl << "= " << ppprev_line << std::endl << "=  " << pprev_line << std::endl << "= " << prev_line << std::endl << "> " << curr_line;
    #####:  208:            is2.get(c2);
    #####:  209:            while (is2 && (c2 != '\n'))
        -:  210:            {
    #####:  211:                explanation << c2;
    #####:  212:                is2.get(c2);
        -:  213:            }
    #####:  214:            explanation << std::endl;
    #####:  215:            return false;
        -:  216:        }
    #####:  217:        if (c1 != c2)
        -:  218:        {
    #####:  219:            explanation << "Files '" << file1 << "' and '" << file2 << "' differ at line " << nline;
    #####:  220:            explanation << std::endl << "= " << ppprev_line << std::endl << "=  " << pprev_line << std::endl << "= " << prev_line;
        -:  221:
    #####:  222:            explanation << std::endl << "< " << curr_line;
    #####:  223:            is2.get(c1);
    #####:  224:            while (is1 && (c1 != '\n'))
        -:  225:            {
    #####:  226:                explanation << c1;
    #####:  227:                is2.get(c1);
        -:  228:            }
    #####:  229:            explanation << std::endl;
        -:  230:
    #####:  231:            explanation << std::endl << "> " << curr_line;
    #####:  232:            is2.get(c2);
    #####:  233:            while (is2 && (c2 != '\n'))
        -:  234:            {
    #####:  235:                explanation << c2;
    #####:  236:                is2.get(c2);
        -:  237:            }
    #####:  238:            explanation << std::endl;
        -:  239:
    #####:  240:            return false;
        -:  241:        }
    #####:  242:        if (c1 == '\n')
        -:  243:        {
    #####:  244:            ppprev_line = pprev_line;
    #####:  245:            pprev_line = prev_line;
    #####:  246:            prev_line = curr_line;
    #####:  247:            curr_line = "";
    #####:  248:            nline++;
        -:  249:        }
        -:  250:        else
        -:  251:        {
    #####:  252:            curr_line += c1;
        -:  253:        }
    #####:  254:    }
        -:  255:}
        -:  256:#endif
        -:  257:
    #####:  258:void doAssertSameFiles(const char * file, int line,
        -:  259:                       const char * file1, const char * file2,
        -:  260:                       const char * message)
        -:  261:{
        -:  262:#if defined(_CXXTEST_HAVE_STD)
    #####:  263:    std::ostringstream explanation;
    #####:  264:    if (!sameFiles(file1, file2, explanation))
        -:  265:    {
    #####:  266:        if (message)
        -:  267:        {
    #####:  268:            tracker().failedTest(file, line, message);
        -:  269:        }
    #####:  270:        tracker().failedAssertSameFiles(file, line, file1, file2, explanation.str().c_str());
    #####:  271:        TS_ABORT();
    #####:  272:    }
        -:  273:#else
        -:  274:    tracker().failedAssertSameFiles(file, line, file1, file2, "This test is only supported when --have-std is enabled");
        -:  275:    TS_ABORT();
        -:  276:#endif
    #####:  277:}
        -:  278:
    #####:  279:void doFailAssertThrows(const char * file, int line,
        -:  280:                        const char * expr, const char * type,
        -:  281:                        bool otherThrown,
        -:  282:                        const char * message,
        -:  283:                        const char * exception)
        -:  284:{
    #####:  285:    if (exception)
        -:  286:    {
    #####:  287:        tracker().failedTest(file, line, exception);
        -:  288:    }
    #####:  289:    if (message)
        -:  290:    {
    #####:  291:        tracker().failedTest(file, line, message);
        -:  292:    }
        -:  293:
    #####:  294:    tracker().failedAssertThrows(file, line, expr, type, otherThrown);
    #####:  295:    TS_ABORT();
    #####:  296:}
        -:  297:
    #####:  298:void doFailAssertThrowsNot(const char * file, int line,
        -:  299:                           const char * expression, const char * message,
        -:  300:                           const char * exception)
        -:  301:{
    #####:  302:    if (exception)
        -:  303:    {
    #####:  304:        tracker().failedTest(file, line, exception);
        -:  305:    }
    #####:  306:    if (message)
        -:  307:    {
    #####:  308:        tracker().failedTest(file, line, message);
        -:  309:    }
        -:  310:
    #####:  311:    tracker().failedAssertThrowsNot(file, line, expression);
    #####:  312:    TS_ABORT();
    #####:  313:}
        -:  314:}
        -:  315:
        -:  316:#endif // __cxxtest__TestSuite_cpp__
        -:  317:
