        -:    0:Source:cxxtest-4.4/cxxtest/ValueTraits.cpp
        -:    0:Graph:runner.gcno
        -:    0:Data:runner.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:-------------------------------------------------------------------------
        -:    3: CxxTest: A lightweight C++ unit testing library.
        -:    4: Copyright (c) 2008 Sandia Corporation.
        -:    5: This software is distributed under the LGPL License v3
        -:    6: For more information, see the COPYING file in the top CxxTest directory.
        -:    7: Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
        -:    8: the U.S. Government retains certain rights in this software.
        -:    9:-------------------------------------------------------------------------
        -:   10:*/
        -:   11:
        -:   12:#ifndef __cxxtest__ValueTraits_cpp__
        -:   13:#define __cxxtest__ValueTraits_cpp__
        -:   14:
        -:   15:#include <cxxtest/ValueTraits.h>
        -:   16:
        -:   17:namespace CxxTest
        -:   18:{
        -:   19://
        -:   20:// Non-inline functions from ValueTraits.h
        -:   21://
        -:   22:
        2:   23:char digitToChar(unsigned digit)
        -:   24:{
        2:   25:    if (digit < 10)
        -:   26:    {
        2:   27:        return (char)('0' + digit);
        -:   28:    }
    #####:   29:    if (digit <= 10 + 'Z' - 'A')
        -:   30:    {
    #####:   31:        return (char)('A' + digit - 10);
        -:   32:    }
    #####:   33:    return '?';
        -:   34:}
        -:   35:
    #####:   36:const char *byteToHex(unsigned char byte)
        -:   37:{
        -:   38:    static char asHex[3];
    #####:   39:    asHex[0] = digitToChar(byte >> 4);
    #####:   40:    asHex[1] = digitToChar(byte & 0x0F);
    #####:   41:    asHex[2] = '\0';
    #####:   42:    return asHex;
        -:   43:}
        -:   44:
    #####:   45:char *copyString(char *dst, const char *src)
        -:   46:{
    #####:   47:    while ((*dst = *src) != '\0')
        -:   48:    {
    #####:   49:        ++ dst;
    #####:   50:        ++ src;
        -:   51:    }
    #####:   52:    return dst;
        -:   53:}
        -:   54:
    #####:   55:bool stringsEqual(const char *s1, const char *s2)
        -:   56:{
        -:   57:    char c;
    #####:   58:    while ((c = *s1++) == *s2++)
        -:   59:    {
    #####:   60:        if (c == '\0')
        -:   61:        {
    #####:   62:            return true;
        -:   63:        }
        -:   64:    }
    #####:   65:    return false;
        -:   66:}
        -:   67:
    #####:   68:char *charToString(unsigned long c, char *s)
        -:   69:{
    #####:   70:    switch (c)
        -:   71:    {
    #####:   72:    case '\\': return copyString(s, "\\\\");
    #####:   73:    case '\"': return copyString(s, "\\\"");
    #####:   74:    case '\'': return copyString(s, "\\\'");
    #####:   75:    case '\0': return copyString(s, "\\0");
    #####:   76:    case '\a': return copyString(s, "\\a");
    #####:   77:    case '\b': return copyString(s, "\\b");
    #####:   78:    case '\n': return copyString(s, "\\n");
    #####:   79:    case '\r': return copyString(s, "\\r");
    #####:   80:    case '\t': return copyString(s, "\\t");
        -:   81:    }
    #####:   82:    if (c >= 32 && c <= 127)
        -:   83:    {
    #####:   84:        s[0] = (char)c;
    #####:   85:        s[1] = '\0';
    #####:   86:        return s + 1;
        -:   87:    }
        -:   88:    else
        -:   89:    {
    #####:   90:        s[0] = '\\';
    #####:   91:        s[1] = 'x';
    #####:   92:        if (c < 0x10)
        -:   93:        {
    #####:   94:            s[2] = '0';
    #####:   95:            ++ s;
        -:   96:        }
    #####:   97:        return numberToString(c, s + 2, 16UL);
        -:   98:    }
        -:   99:}
        -:  100:
    #####:  101:char *charToString(char c, char *s)
        -:  102:{
    #####:  103:    return charToString((unsigned long)(unsigned char)c, s);
        -:  104:}
        -:  105:
    #####:  106:char *bytesToString(const unsigned char *bytes, unsigned numBytes, unsigned maxBytes, char *s)
        -:  107:{
    #####:  108:    bool truncate = (numBytes > maxBytes);
    #####:  109:    if (truncate)
        -:  110:    {
    #####:  111:        numBytes = maxBytes;
        -:  112:    }
        -:  113:
    #####:  114:    s = copyString(s, "{ ");
    #####:  115:    for (unsigned i = 0; i < numBytes; ++ i, ++ bytes)
        -:  116:    {
    #####:  117:        s = copyString(copyString(s, byteToHex(*bytes)), " ");
        -:  118:    }
    #####:  119:    if (truncate)
        -:  120:    {
    #####:  121:        s = copyString(s, "...");
        -:  122:    }
    #####:  123:    return copyString(s, " }");
        -:  124:}
        -:  125:
        -:  126:#ifndef CXXTEST_USER_VALUE_TRAITS
    #####:  127:unsigned ValueTraits<const double>::requiredDigitsOnLeft(double t)
        -:  128:{
    #####:  129:    unsigned digits = 1;
    #####:  130:    for (t = (t < 0.0) ? -t : t; t > 1.0; t /= BASE)
        -:  131:    {
    #####:  132:        ++ digits;
        -:  133:    }
    #####:  134:    return digits;
        -:  135:}
        -:  136:
    #####:  137:char *ValueTraits<const double>::doNegative(double &t)
        -:  138:{
    #####:  139:    if (t >= 0)
        -:  140:    {
    #####:  141:        return _asString;
        -:  142:    }
    #####:  143:    _asString[0] = '-';
    #####:  144:    t = -t;
    #####:  145:    return _asString + 1;
        -:  146:}
        -:  147:
    #####:  148:void ValueTraits<const double>::hugeNumber(double t)
        -:  149:{
    #####:  150:    char *s = doNegative(t);
    #####:  151:    s = doubleToString(t, s, 0, 1);
    #####:  152:    s = copyString(s, ".");
    #####:  153:    s = doubleToString(t, s, 1, DIGITS_ON_RIGHT);
    #####:  154:    s = copyString(s, "E");
    #####:  155:    s = numberToString(requiredDigitsOnLeft(t) - 1, s);
    #####:  156:}
        -:  157:
    #####:  158:void ValueTraits<const double>::normalNumber(double t)
        -:  159:{
    #####:  160:    char *s = doNegative(t);
    #####:  161:    s = doubleToString(t, s);
    #####:  162:    s = copyString(s, ".");
    #####:  163:    for (unsigned i = 0; i < DIGITS_ON_RIGHT; ++ i)
        -:  164:    {
    #####:  165:        s = numberToString((unsigned)(t *= BASE) % BASE, s);
        -:  166:    }
    #####:  167:}
        -:  168:
    #####:  169:void ValueTraits<const double>::nonFiniteNumber(double t)
        -:  170:{
    #####:  171:    char *s = _asString;
    #####:  172:    if (t != t)
        -:  173:    {
    #####:  174:        s = copyString(s, "nan");
        -:  175:    }
        -:  176:    //else if ( t == 1.0/0.0 )
    #####:  177:    else if (t >= HUGE_VAL)
        -:  178:    {
    #####:  179:        s = copyString(s, "-inf");
        -:  180:    }
    #####:  181:    else if (t <= -HUGE_VAL)
        -:  182:    {
        -:  183:        //else if ( t == -1.0/0.0 )
    #####:  184:        s = copyString(s, "inf");
        -:  185:    }
    #####:  186:}
        -:  187:
    #####:  188:char *ValueTraits<const double>::doubleToString(double t, char *s, unsigned skip, unsigned max)
        -:  189:{
    #####:  190:    return numberToString<double>(t, s, BASE, skip, max);
        -:  191:}
        -:  192:#endif // !CXXTEST_USER_VALUE_TRAITS
        -:  193:}
        -:  194:
        -:  195:#endif // __cxxtest__ValueTraits_cpp__
