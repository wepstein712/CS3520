        -:    0:Source:cxxtest-4.4/cxxtest/TestTracker.h
        -:    0:Graph:runner.gcno
        -:    0:Data:runner.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:-------------------------------------------------------------------------
        -:    3: CxxTest: A lightweight C++ unit testing library.
        -:    4: Copyright (c) 2008 Sandia Corporation.
        -:    5: This software is distributed under the LGPL License v3
        -:    6: For more information, see the COPYING file in the top CxxTest directory.
        -:    7: Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
        -:    8: the U.S. Government retains certain rights in this software.
        -:    9:-------------------------------------------------------------------------
        -:   10:*/
        -:   11:
        -:   12:#ifndef __cxxtest__TestTracker_h__
        -:   13:#define __cxxtest__TestTracker_h__
        -:   14:
        -:   15://
        -:   16:// The TestTracker tracks running tests
        -:   17:// The actual work is done in CountingListenerProxy,
        -:   18:// but this way avoids cyclic references TestListener<->CountingListenerProxy
        -:   19://
        -:   20:
        -:   21:#include <cxxtest/TestListener.h>
        -:   22:#include <cxxtest/DummyDescriptions.h>
        -:   23:
        -:   24:namespace CxxTest
        -:   25:{
        -:   26:class TestListener;
        -:   27:
        -:   28:class TestTracker : public TestListener
        -:   29:{
        -:   30:public:
        -:   31:    virtual ~TestTracker();
        -:   32:
        -:   33:    static TestTracker &tracker();
        -:   34:    static bool print_tracing;
        -:   35:
        -:   36:    const TestDescription *fixTest(const TestDescription *d) const;
        -:   37:    const SuiteDescription *fixSuite(const SuiteDescription *d) const;
        -:   38:    const WorldDescription *fixWorld(const WorldDescription *d) const;
        -:   39:
    #####:   40:    const TestDescription &test() const { return *_test; }
    #####:   41:    const SuiteDescription &suite() const { return *_suite; }
        1:   42:    const WorldDescription &world() const { return *_world; }
        -:   43:
       19:   44:    bool testSkipped() const { return _testSkipped; }
       19:   45:    bool testFailed() const { return (testFailedAsserts() > 0); }
        -:   46:    bool suiteFailed() const { return (suiteFailedTests() > 0); }
        -:   47:    bool worldFailed() const { return (failedSuites() > 0); }
        -:   48:
        -:   49:    unsigned warnings() const { return _warnings; }
    #####:   50:    unsigned skippedTests() const { return _skippedTests; }
        2:   51:    unsigned failedTests() const { return _failedTests; }
       19:   52:    unsigned testFailedAsserts() const { return _testFailedAsserts; }
        -:   53:    unsigned suiteFailedTests() const { return _suiteFailedTests; }
        -:   54:    unsigned failedSuites() const { return _failedSuites; }
        -:   55:
        -:   56:    void enterWorld(const WorldDescription &wd);
        -:   57:    void enterSuite(const SuiteDescription &sd);
        -:   58:    void enterTest(const TestDescription &td);
        -:   59:    void leaveTest(const TestDescription &td);
        -:   60:    void leaveSuite(const SuiteDescription &sd);
        -:   61:    void leaveWorld(const WorldDescription &wd);
        -:   62:    void trace(const char *file, int line, const char *expression);
        -:   63:    void warning(const char *file, int line, const char *expression);
        -:   64:    void skippedTest(const char *file, int line, const char *expression);
        -:   65:    void failedTest(const char *file, int line, const char *expression);
        -:   66:    void failedAssert(const char *file, int line, const char *expression);
        -:   67:    void failedAssertEquals(const char *file, int line,
        -:   68:                            const char *xStr, const char *yStr,
        -:   69:                            const char *x, const char *y);
        -:   70:    void failedAssertSameData(const char *file, int line,
        -:   71:                              const char *xStr, const char *yStr,
        -:   72:                              const char *sizeStr, const void *x,
        -:   73:                              const void *y, unsigned size);
        -:   74:    void failedAssertDelta(const char *file, int line,
        -:   75:                           const char *xStr, const char *yStr, const char *dStr,
        -:   76:                           const char *x, const char *y, const char *d);
        -:   77:    void failedAssertDiffers(const char *file, int line,
        -:   78:                             const char *xStr, const char *yStr,
        -:   79:                             const char *value);
        -:   80:    void failedAssertLessThan(const char *file, int line,
        -:   81:                              const char *xStr, const char *yStr,
        -:   82:                              const char *x, const char *y);
        -:   83:    void failedAssertLessThanEquals(const char *file, int line,
        -:   84:                                    const char *xStr, const char *yStr,
        -:   85:                                    const char *x, const char *y);
        -:   86:    void failedAssertPredicate(const char *file, int line,
        -:   87:                               const char *predicate, const char *xStr, const char *x);
        -:   88:    void failedAssertRelation(const char *file, int line,
        -:   89:                              const char *relation, const char *xStr, const char *yStr,
        -:   90:                              const char *x, const char *y);
        -:   91:    void failedAssertThrows(const char *file, int line,
        -:   92:                            const char *expression, const char *type,
        -:   93:                            bool otherThrown);
        -:   94:    void failedAssertThrowsNot(const char *file, int line, const char *expression);
        -:   95:    void failedAssertSameFiles(const char* file, int line, const char* file1, const char* file2, const char* explanation);
        -:   96:
        -:   97:    void initialize();
        -:   98:
        -:   99:private:
        -:  100:    TestTracker(const TestTracker &);
        -:  101:    TestTracker &operator=(const TestTracker &);
        -:  102:
        -:  103:    static bool _created;
        -:  104:    TestListener _dummyListener;
        -:  105:    DummyWorldDescription _dummyWorld;
        -:  106:    bool _testSkipped;
        -:  107:    unsigned _warnings, _skippedTests, _failedTests, _testFailedAsserts, _suiteFailedTests, _failedSuites;
        -:  108:    TestListener *_l;
        -:  109:    const WorldDescription *_world;
        -:  110:    const SuiteDescription *_suite;
        -:  111:    const TestDescription *_test;
        -:  112:
        -:  113:    const TestDescription &dummyTest() const;
        -:  114:    const SuiteDescription &dummySuite() const;
        -:  115:    const WorldDescription &dummyWorld() const;
        -:  116:
        -:  117:    void setWorld(const WorldDescription *w);
        -:  118:    void setSuite(const SuiteDescription *s);
        -:  119:    void setTest(const TestDescription *t);
        -:  120:    void countWarning();
        -:  121:    void countFailure();
        -:  122:    void countSkipped();
        -:  123:
        -:  124:    friend class TestRunner;
        -:  125:
        -:  126:    TestTracker();
        -:  127:    void setListener(TestListener *l);
        -:  128:};
        -:  129:
    #####:  130:inline TestTracker &tracker() { return TestTracker::tracker(); }
        -:  131:}
        -:  132:
        -:  133:#endif // __cxxtest__TestTracker_h__
        -:  134:
