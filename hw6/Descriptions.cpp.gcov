        -:    0:Source:cxxtest-4.4/cxxtest/Descriptions.cpp
        -:    0:Graph:runner.gcno
        -:    0:Data:runner.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:-------------------------------------------------------------------------
        -:    3: CxxTest: A lightweight C++ unit testing library.
        -:    4: Copyright (c) 2008 Sandia Corporation.
        -:    5: This software is distributed under the LGPL License v3
        -:    6: For more information, see the COPYING file in the top CxxTest directory.
        -:    7: Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
        -:    8: the U.S. Government retains certain rights in this software.
        -:    9:-------------------------------------------------------------------------
        -:   10:*/
        -:   11:
        -:   12:#ifndef __cxxtest__Descriptions_cpp__
        -:   13:#define __cxxtest__Descriptions_cpp__
        -:   14:
        -:   15:#include <cxxtest/Descriptions.h>
        -:   16:
        -:   17:namespace CxxTest
        -:   18:{
       20:   19:TestDescription::~TestDescription() {}
        3:   20:SuiteDescription::~SuiteDescription() {}
        2:   21:WorldDescription::~WorldDescription() {}
        -:   22:
        -:   23://
        -:   24:// Convert total tests to string
        -:   25://
        -:   26:#ifndef _CXXTEST_FACTOR
        1:   27:char *WorldDescription::strTotalTests(char *s) const
        -:   28:{
        1:   29:    numberToString(numTotalTests(), s);
        1:   30:    return s;
        -:   31:}
        -:   32:#else // _CXXTEST_FACTOR
        -:   33:char *WorldDescription::strTotalTests(char *s) const
        -:   34:{
        -:   35:    char *p = numberToString(numTotalTests(), s);
        -:   36:
        -:   37:    if (numTotalTests() <= 1)
        -:   38:    {
        -:   39:        return s;
        -:   40:    }
        -:   41:
        -:   42:    unsigned n = numTotalTests();
        -:   43:    unsigned numFactors = 0;
        -:   44:
        -:   45:    for (unsigned factor = 2; (factor * factor) <= n; factor += (factor == 2) ? 1 : 2)
        -:   46:    {
        -:   47:        unsigned power;
        -:   48:
        -:   49:        for (power = 0; (n % factor) == 0; n /= factor)
        -:   50:        {
        -:   51:            ++ power;
        -:   52:        }
        -:   53:
        -:   54:        if (!power)
        -:   55:        {
        -:   56:            continue;
        -:   57:        }
        -:   58:
        -:   59:        p = numberToString(factor, copyString(p, (numFactors == 0) ? " = " : " * "));
        -:   60:        if (power > 1)
        -:   61:        {
        -:   62:            p = numberToString(power, copyString(p, "^"));
        -:   63:        }
        -:   64:        ++ numFactors;
        -:   65:    }
        -:   66:
        -:   67:    if (n > 1)
        -:   68:    {
        -:   69:        if (!numFactors)
        -:   70:        {
        -:   71:            copyString(p, tracker().failedTests() ? " :(" : tracker().warnings() ? " :|" : " :)");
        -:   72:        }
        -:   73:        else
        -:   74:        {
        -:   75:            numberToString(n, copyString(p, " * "));
        -:   76:        }
        -:   77:    }
        -:   78:    return s;
        -:   79:}
        -:   80:#endif // _CXXTEST_FACTOR
        -:   81:}
        -:   82:
        -:   83:#endif // __cxxtest__Descriptions_cpp__
