        -:    0:Source:cxxtest-4.4/cxxtest/ValueTraits.h
        -:    0:Graph:runner.gcno
        -:    0:Data:runner.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:-------------------------------------------------------------------------
        -:    3: CxxTest: A lightweight C++ unit testing library.
        -:    4: Copyright (c) 2008 Sandia Corporation.
        -:    5: This software is distributed under the LGPL License v3
        -:    6: For more information, see the COPYING file in the top CxxTest directory.
        -:    7: Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
        -:    8: the U.S. Government retains certain rights in this software.
        -:    9:-------------------------------------------------------------------------
        -:   10:*/
        -:   11:
        -:   12:#ifndef __cxxtest__ValueTraits_h__
        -:   13:#define __cxxtest__ValueTraits_h__
        -:   14:
        -:   15://
        -:   16:// ValueTraits are used by CxxTest to convert arbitrary
        -:   17:// values used in TS_ASSERT_EQUALS() to a string representation.
        -:   18://
        -:   19:// This header file contains value traits for builtin integral types.
        -:   20:// To declare value traits for new types you should instantiate the class
        -:   21:// ValueTraits<YourClass>.
        -:   22://
        -:   23:
        -:   24:#include <cxxtest/Flags.h>
        -:   25:
        -:   26:#ifdef _CXXTEST_OLD_TEMPLATE_SYNTAX
        -:   27:#   define CXXTEST_TEMPLATE_INSTANTIATION
        -:   28:#else // !_CXXTEST_OLD_TEMPLATE_SYNTAX
        -:   29:#   define CXXTEST_TEMPLATE_INSTANTIATION template<>
        -:   30:#endif // _CXXTEST_OLD_TEMPLATE_SYNTAX
        -:   31:
        -:   32:#ifdef _CXXTEST_HAVE_STD
        -:   33:#include <cmath>
        -:   34:#else
        -:   35:#include <math.h>
        -:   36:#endif
        -:   37:
        -:   38:namespace CxxTest
        -:   39:{
        -:   40://
        -:   41:// This is how we use the value traits
        -:   42://
        -:   43:#   define TS_AS_STRING(x) CxxTest::traits(x).asString()
        -:   44:
        -:   45://
        -:   46:// Char representation of a digit
        -:   47://
        -:   48:char digitToChar(unsigned digit);
        -:   49:
        -:   50://
        -:   51:// Convert byte value to hex digits
        -:   52:// Returns pointer to internal buffer
        -:   53://
        -:   54:const char *byteToHex(unsigned char byte);
        -:   55:
        -:   56://
        -:   57:// Convert byte values to string
        -:   58:// Returns one past the copied data
        -:   59://
        -:   60:char *bytesToString(const unsigned char *bytes, unsigned numBytes, unsigned maxBytes, char *s);
        -:   61:
        -:   62://
        -:   63:// Copy a string.
        -:   64:// Returns one past the end of the destination string
        -:   65:// Remember -- we can't use the standard library!
        -:   66://
        -:   67:char *copyString(char *dst, const char *src);
        -:   68:
        -:   69://
        -:   70:// Compare two strings.
        -:   71:// Remember -- we can't use the standard library!
        -:   72://
        -:   73:bool stringsEqual(const char *s1, const char *s2);
        -:   74:
        -:   75://
        -:   76:// Represent a character value as a string
        -:   77:// Returns one past the end of the string
        -:   78:// This will be the actual char if printable or '\xXXXX' otherwise
        -:   79://
        -:   80:char *charToString(unsigned long c, char *s);
        -:   81:
        -:   82://
        -:   83:// Prevent problems with negative (signed char)s
        -:   84://
        -:   85:char *charToString(char c, char *s);
        -:   86:
        -:   87://
        -:   88:// The default ValueTraits class dumps up to 8 bytes as hex values
        -:   89://
        -:   90:template <class T>
        -:   91:class ValueTraits
        -:   92:{
        -:   93:    enum { MAX_BYTES = 8 };
        -:   94:    char _asString[sizeof("{ ") + sizeof("XX ") * MAX_BYTES + sizeof("... }")];
        -:   95:
        -:   96:public:
        -:   97:    ValueTraits(const T &t) { bytesToString((const unsigned char *)&t, sizeof(T), MAX_BYTES, _asString); }
        -:   98:    const char *asString(void) const { return _asString; }
        -:   99:};
        -:  100:
        -:  101://
        -:  102:// traits( T t )
        -:  103:// Creates an object of type ValueTraits<T>
        -:  104://
        -:  105:template <class T>
        -:  106:inline ValueTraits<T> traits(T t)
        -:  107:{
        -:  108:    return ValueTraits<T>(t);
        -:  109:}
        -:  110:
        -:  111://
        -:  112:// You can duplicate the implementation of an existing ValueTraits
        -:  113://
        -:  114:#   define CXXTEST_COPY_TRAITS(CXXTEST_NEW_CLASS, CXXTEST_OLD_CLASS) \
        -:  115:    CXXTEST_TEMPLATE_INSTANTIATION \
        -:  116:    class ValueTraits< CXXTEST_NEW_CLASS > \
        -:  117:    { \
        -:  118:        ValueTraits< CXXTEST_OLD_CLASS > _old; \
        -:  119:    public: \
        -:  120:        ValueTraits( CXXTEST_NEW_CLASS n ) : _old( (CXXTEST_OLD_CLASS)n ) {} \
        -:  121:        const char *asString( void ) const { return _old.asString(); } \
        -:  122:    }
        -:  123:
        -:  124://
        -:  125:// Certain compilers need separate declarations for T and const T
        -:  126://
        -:  127:#   ifdef _CXXTEST_NO_COPY_CONST
        -:  128:#       define CXXTEST_COPY_CONST_TRAITS(CXXTEST_CLASS)
        -:  129:#   else // !_CXXTEST_NO_COPY_CONST
        -:  130:#       define CXXTEST_COPY_CONST_TRAITS(CXXTEST_CLASS) CXXTEST_COPY_TRAITS(CXXTEST_CLASS, const CXXTEST_CLASS)
        -:  131:#   endif // _CXXTEST_NO_COPY_CONST
        -:  132:
        -:  133://
        -:  134:// Avoid compiler warnings about unsigned types always >= 0
        -:  135://
    #####:  136:template<class N> inline bool negative(N n) { return n < 0; }
    #####:  137:template<class N> inline N abs(N n) { return negative(n) ? -n : n; }
        -:  138:
        -:  139:#   define CXXTEST_NON_NEGATIVE(Type) \
        -:  140:    CXXTEST_TEMPLATE_INSTANTIATION \
        -:  141:    inline bool negative<Type>( Type ) { return false; } \
        -:  142:    CXXTEST_TEMPLATE_INSTANTIATION \
        -:  143:    inline Type abs<Type>( Type value ) { return value; }
        -:  144:
        -:  145:CXXTEST_NON_NEGATIVE(bool)
        -:  146:CXXTEST_NON_NEGATIVE(unsigned char)
        -:  147:CXXTEST_NON_NEGATIVE(unsigned short int)
        1:  148:CXXTEST_NON_NEGATIVE(unsigned int)
    #####:  149:CXXTEST_NON_NEGATIVE(unsigned long int)
        -:  150:#   ifdef _CXXTEST_LONGLONG
        -:  151:CXXTEST_NON_NEGATIVE(unsigned _CXXTEST_LONGLONG)
        -:  152:#   endif // _CXXTEST_LONGLONG
        -:  153:
        -:  154://
        -:  155:// Represent (integral) number as a string
        -:  156:// Returns one past the end of the string
        -:  157:// Remember -- we can't use the standard library!
        -:  158://
        -:  159:template<class N>
        1:  160:char *numberToString(N n, char *s,
        -:  161:                     N base = 10,
        -:  162:                     unsigned skipDigits = 0,
        -:  163:                     unsigned maxDigits = (unsigned) - 1)
        -:  164:{
        1:  165:    if (negative(n))
        -:  166:    {
    #####:  167:        *s++ = '-';
    #####:  168:        n = abs(n);
        -:  169:    }
        -:  170:
        1:  171:    N digit = 1;
        3:  172:    while (digit <= (n / base))
        -:  173:    {
        1:  174:        digit *= base;
        -:  175:    }
        -:  176:    N digitValue;
        1:  177:    for (; digit >= 1 && skipDigits; n -= digit * digitValue, digit /= base, -- skipDigits)
        -:  178:    {
    #####:  179:        digitValue = (unsigned)(n / digit);
        -:  180:    }
        3:  181:    for (; digit >= 1 && maxDigits; n -= digit * digitValue, digit /= base, -- maxDigits)
        -:  182:    {
        2:  183:        *s++ = digitToChar((unsigned)(digitValue = (unsigned)(n / digit)));
        -:  184:    }
        -:  185:
        1:  186:    *s = '\0';
        1:  187:    return s;
        -:  188:}
        -:  189:
        -:  190://
        -:  191:// All the specific ValueTraits follow.
        -:  192:// You can #define CXXTEST_USER_VALUE_TRAITS if you don't want them
        -:  193://
        -:  194:
        -:  195:#ifndef CXXTEST_USER_VALUE_TRAITS
        -:  196://
        -:  197:// ValueTraits: const char * const &
        -:  198:// This is used for printing strings, as in TS_FAIL( "Message" )
        -:  199://
        -:  200:CXXTEST_TEMPLATE_INSTANTIATION
        -:  201:class ValueTraits<const char * const &>
        -:  202:{
        -:  203:    ValueTraits &operator=(const ValueTraits &);
        -:  204:    const char *_asString;
        -:  205:
        -:  206:public:
        -:  207:    ValueTraits(const char * const &value) : _asString(value) {}
        -:  208:    ValueTraits(const ValueTraits &other) : _asString(other._asString) {}
        -:  209:    const char *asString(void) const { return _asString; }
        -:  210:#if 0
        -:  211:    const char *asString(void) const
        -:  212:    {
        -:  213:        std::string tmp(1, '"');
        -:  214:        for (char const* src = _asString; src && *src; ++src)
        -:  215:        {
        -:  216:            switch (*src)
        -:  217:            {
        -:  218:            case '\\': tmp += "\\\\"; break;
        -:  219:            case '\n': tmp += "\\n";  break;
        -:  220:            case '\r': tmp += "\\r";  break;
        -:  221:            case '\t': tmp += "\\t";  break;
        -:  222:            case '"':  tmp += "\\\""; break;
        -:  223:            default:   tmp += *src;   break;
        -:  224:            }
        -:  225:        }
        -:  226:        tmp += '"';
        -:  227:
        -:  228:        char* res = new char[tmp.size() + 1];
        -:  229:        return strcpy(res, tmp.c_str());
        -:  230:    }
        -:  231:#endif
        -:  232:};
        -:  233:
        -:  234:CXXTEST_COPY_TRAITS(const char *, const char * const &);
        -:  235:CXXTEST_COPY_TRAITS(char *, const char * const &);
        -:  236:
        -:  237://
        -:  238:// ValueTraits: bool
        -:  239://
        -:  240:CXXTEST_TEMPLATE_INSTANTIATION
        -:  241:class ValueTraits<const bool>
        -:  242:{
        -:  243:    bool _value;
        -:  244:
        -:  245:public:
        -:  246:    ValueTraits(const bool value) : _value(value) {}
        -:  247:    const char *asString(void) const { return _value ? "true" : "false"; }
        -:  248:};
        -:  249:
        -:  250:CXXTEST_COPY_CONST_TRAITS(bool);
        -:  251:
        -:  252:#   ifdef _CXXTEST_LONGLONG
        -:  253://
        -:  254:// ValueTraits: signed long long
        -:  255://
        -:  256:CXXTEST_TEMPLATE_INSTANTIATION
        -:  257:class ValueTraits<const signed _CXXTEST_LONGLONG>
        -:  258:{
        -:  259:    typedef _CXXTEST_LONGLONG T;
        -:  260:    char _asString[2 + 3 * sizeof(T)];
        -:  261:public:
        -:  262:    ValueTraits(T t) { numberToString<T>(t, _asString); }
        -:  263:    const char *asString(void) const { return _asString; }
        -:  264:};
        -:  265:
        -:  266:CXXTEST_COPY_CONST_TRAITS(signed _CXXTEST_LONGLONG);
        -:  267:
        -:  268://
        -:  269:// ValueTraits: unsigned long long
        -:  270://
        -:  271:CXXTEST_TEMPLATE_INSTANTIATION
        -:  272:class ValueTraits<const unsigned _CXXTEST_LONGLONG>
        -:  273:{
        -:  274:    typedef unsigned _CXXTEST_LONGLONG T;
        -:  275:    char _asString[1 + 3 * sizeof(T)];
        -:  276:public:
        -:  277:    ValueTraits(T t) { numberToString<T>(t, _asString); }
        -:  278:    const char *asString(void) const { return _asString; }
        -:  279:};
        -:  280:
        -:  281:CXXTEST_COPY_CONST_TRAITS(unsigned _CXXTEST_LONGLONG);
        -:  282:#   endif // _CXXTEST_LONGLONG
        -:  283:
        -:  284://
        -:  285:// ValueTraits: signed long
        -:  286://
        -:  287:CXXTEST_TEMPLATE_INSTANTIATION
        -:  288:class ValueTraits<const signed long int>
        -:  289:{
        -:  290:    typedef signed long int T;
        -:  291:    char _asString[2 + 3 * sizeof(T)];
        -:  292:public:
        -:  293:    ValueTraits(T t) { numberToString<T>(t, _asString); }
        -:  294:    const char *asString(void) const { return _asString; }
        -:  295:};
        -:  296:
        -:  297:CXXTEST_COPY_CONST_TRAITS(signed long int);
        -:  298:
        -:  299://
        -:  300:// ValueTraits: unsigned long
        -:  301://
        -:  302:CXXTEST_TEMPLATE_INSTANTIATION
        -:  303:class ValueTraits<const unsigned long int>
        -:  304:{
        -:  305:    typedef unsigned long int T;
        -:  306:    char _asString[1 + 3 * sizeof(T)];
        -:  307:public:
        -:  308:    ValueTraits(T t) { numberToString<T>(t, _asString); }
        -:  309:    const char *asString(void) const { return _asString; }
        -:  310:};
        -:  311:
        -:  312:CXXTEST_COPY_CONST_TRAITS(unsigned long int);
        -:  313:
        -:  314://
        -:  315:// All decimals are the same as the long version
        -:  316://
        -:  317:
        -:  318:CXXTEST_COPY_TRAITS(const signed int, const signed long int);
        -:  319:CXXTEST_COPY_TRAITS(const unsigned int, const unsigned long int);
        -:  320:CXXTEST_COPY_TRAITS(const signed short int, const signed long int);
        -:  321:CXXTEST_COPY_TRAITS(const unsigned short int, const unsigned long int);
        -:  322:CXXTEST_COPY_TRAITS(const unsigned char, const unsigned long int);
        -:  323:
        -:  324:CXXTEST_COPY_CONST_TRAITS(signed int);
        -:  325:CXXTEST_COPY_CONST_TRAITS(unsigned int);
        -:  326:CXXTEST_COPY_CONST_TRAITS(signed short int);
        -:  327:CXXTEST_COPY_CONST_TRAITS(unsigned short int);
        -:  328:CXXTEST_COPY_CONST_TRAITS(unsigned char);
        -:  329:
        -:  330://
        -:  331:// ValueTraits: char
        -:  332:// Returns 'x' for printable chars, '\x??' for others
        -:  333://
        -:  334:CXXTEST_TEMPLATE_INSTANTIATION
        -:  335:class ValueTraits<const char>
        -:  336:{
        -:  337:    char _asString[sizeof("'\\xXX'")];
        -:  338:public:
        -:  339:    ValueTraits(char c) { copyString(charToString(c, copyString(_asString, "'")), "'"); }
        -:  340:    const char *asString(void) const { return _asString; }
        -:  341:};
        -:  342:
        -:  343:CXXTEST_COPY_CONST_TRAITS(char);
        -:  344:
        -:  345://
        -:  346:// ValueTraits: signed char
        -:  347:// Same as char, some compilers need it
        -:  348://
        -:  349:CXXTEST_COPY_TRAITS(const signed char, const char);
        -:  350:CXXTEST_COPY_CONST_TRAITS(signed char);
        -:  351:
        -:  352://
        -:  353:// ValueTraits: double
        -:  354://
        -:  355:CXXTEST_TEMPLATE_INSTANTIATION
        -:  356:class ValueTraits<const double>
        -:  357:{
        -:  358:public:
        -:  359:    ValueTraits(double t)
        -:  360:    {
        -:  361:        if ((t != t) || (t >= HUGE_VAL) || (t == -HUGE_VAL))
        -:  362:        {
        -:  363:            nonFiniteNumber(t);
        -:  364:        }
        -:  365:        else if (requiredDigitsOnLeft(t) > MAX_DIGITS_ON_LEFT)
        -:  366:        {
        -:  367:            hugeNumber(t);
        -:  368:        }
        -:  369:        else
        -:  370:        {
        -:  371:            normalNumber(t);
        -:  372:        }
        -:  373:    }
        -:  374:
        -:  375:    const char *asString(void) const { return _asString; }
        -:  376:
        -:  377:private:
        -:  378:    enum { MAX_DIGITS_ON_LEFT = 24, DIGITS_ON_RIGHT = 4, BASE = 10 };
        -:  379:    char _asString[1 + MAX_DIGITS_ON_LEFT + 1 + DIGITS_ON_RIGHT + 1];
        -:  380:
        -:  381:    static unsigned requiredDigitsOnLeft(double t);
        -:  382:    char *doNegative(double &t);
        -:  383:    void hugeNumber(double t);
        -:  384:    void normalNumber(double t);
        -:  385:    void nonFiniteNumber(double t);
        -:  386:    char *doubleToString(double t, char *s, unsigned skip = 0, unsigned max = (unsigned) - 1);
        -:  387:};
        -:  388:
        -:  389:CXXTEST_COPY_CONST_TRAITS(double);
        -:  390:
        -:  391://
        -:  392:// ValueTraits: float
        -:  393://
        -:  394:CXXTEST_COPY_TRAITS(const float, const double);
        -:  395:CXXTEST_COPY_CONST_TRAITS(float);
        -:  396:#endif // !CXXTEST_USER_VALUE_TRAITS
        -:  397:}
        -:  398:
        -:  399:#ifdef _CXXTEST_HAVE_STD
        -:  400:#   include <cxxtest/StdValueTraits.h>
        -:  401:#endif // _CXXTEST_HAVE_STD
        -:  402:
        -:  403:namespace dummy_enum_ns {}
        -:  404:
        -:  405://
        -:  406:// CXXTEST_ENUM_TRAITS
        -:  407://
        -:  408:#define CXXTEST_ENUM_TRAITS( TYPE, VALUES ) \
        -:  409:    namespace CxxTest \
        -:  410:    { \
        -:  411:        CXXTEST_TEMPLATE_INSTANTIATION \
        -:  412:        class ValueTraits<TYPE> \
        -:  413:        { \
        -:  414:            TYPE _value; \
        -:  415:            char _fallback[sizeof("(" #TYPE ")") + 3 * sizeof(TYPE)]; \
        -:  416:        public: \
        -:  417:            ValueTraits( TYPE value ) { \
        -:  418:                _value = value; \
        -:  419:                numberToString<unsigned long int>( _value, copyString( _fallback, "(" #TYPE ")" ) ); \
        -:  420:            } \
        -:  421:            const char *asString( void ) const \
        -:  422:            { \
        -:  423:                switch ( _value ) \
        -:  424:                { \
        -:  425:                    VALUES \
        -:  426:                    default: return _fallback; \
        -:  427:                } \
        -:  428:            } \
        -:  429:        }; \
        -:  430:    } using namespace dummy_enum_ns
        -:  431:
        -:  432:#define CXXTEST_ENUM_MEMBER( MEMBER ) \
        -:  433:    case MEMBER: return #MEMBER;
        -:  434:
        -:  435:#endif // __cxxtest__ValueTraits_h__
